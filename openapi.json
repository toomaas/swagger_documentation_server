{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Logs API",
    "description" : "Logs api.  for master thesis",
    "contact" : {
      "email" : "joaquim.abreu@ams.com"
    },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "http://logjoaquim-log-node.apps.amsint.com/api"
  }, {
    "url" : "http://10.63.20.29:8080/api"
  } ],
  "tags" : [ {
    "name" : "REST",
    "description" : "Operations through the REST API endpoints"
  }, {
    "name" : "GraphQL",
    "description" : "Operations through the graphql endpoint"
  } ],
  "paths" : {
    "/graphql" : {
      "post" : {
        "tags" : [ "GraphQL" ],
        "summary" : "Use graphql to query the database",
        "description" : "go to the /graphql endpoint to see in dept documentation",
        "operationId" : "findLogsGraphql",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK. The request had acceptable graphql syntax and the server returned data from the elasticsearchDB",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "example" : {
                    "data" : {
                      "logsearch" : [ {
                        "source_function" : "TEST_REPLICATION.SET_STATE_END_TS",
                        "source_system" : "ORACLE",
                        "log_guid" : "26575765",
                        "log_level" : "ERROR",
                        "application_code" : "LDS",
                        "application_context" : "",
                        "created_at" : "2019-02-04T15:19:03",
                        "log_message" : "Start: Set state_end_ts_utc to [24.01.18 10:47:26,396404]",
                        "call_stack" : "",
                        "created_by" : "TEST_OWNER"
                      } ]
                    }
                  },
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/GraphQLData"
                  }, {
                    "$ref" : "#/components/schemas/GraphQLErrors"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "bad request. could be a graphql specific error or a syntax error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "example" : {
                    "error" : {
                      "name" : "entity.parse.failed",
                      "details" : "Unexpected token y in JSON at position 0"
                    }
                  },
                  "oneOf" : [ {
                    "$ref" : "#/components/schemas/Node400Error"
                  }, {
                    "$ref" : "#/components/schemas/GraphQLErrors"
                  } ]
                }
              }
            }
          }
        },
        "servers" : [ {
          "url" : "http://logjoaquim-log-node.apps.amsint.com"
        }, {
          "url" : "http://10.63.20.29:8080"
        } ]
      }
    },
    "/logs" : {
      "post" : {
        "tags" : [ "REST" ],
        "summary" : "Adds logs",
        "description" : "entries are validated and redirected to logstash to be sent to the DBs",
        "operationId" : "addLogs",
        "requestBody" : {
          "description" : "The logs to insert",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Log"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "ok",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Node400Error"
                }
              }
            }
          },
          "500" : {
            "description" : "internal server error. can be caused by an internally failed connection to some resource (such as logstash)",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_500"
                }
              }
            }
          }
        }
      }
    },
    "/logs/{source_system}/{app_code}" : {
      "get" : {
        "tags" : [ "REST" ],
        "summary" : "Finds logs by source_system and app_code",
        "description" : "gets logs from elasticsearch",
        "operationId" : "findLogsByParams",
        "parameters" : [ {
          "name" : "source_system",
          "in" : "path",
          "description" : "source_system to match",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "app_code",
          "in" : "path",
          "description" : "app_code to match",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "log_level",
          "in" : "query",
          "description" : "optional log_level to match",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "created_at_gte",
          "in" : "query",
          "description" : "created at greater than or equal to. date format= YYYY-MM-DD",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "created_at_lte",
          "in" : "query",
          "description" : "created at less than or equal to. date format= YYYY-MM-DD",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "log_guid",
          "in" : "query",
          "description" : "globally unique identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "offset from the first result you want to fetch. defaults to 0 if not defined or not a number",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "max number of logs in the response. defaults to 500 if not defined or not a number",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "ok. Query and path parameters accepted and used to query the elasticsearchDB. The response is a json object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "400" : {
            "description" : "bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Node400Error"
                },
                "example" : {
                  "error" : {
                    "name" : "parse_exception",
                    "details" : "failed to parse date field"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Log" : {
        "type" : "object",
        "properties" : {
          "source_function" : {
            "type" : "string",
            "description" : "function where the log originated from",
            "example" : "EXAMPLE_SOURCE_FUNCTION.MAIN"
          },
          "source_system" : {
            "type" : "string",
            "description" : "source_system can be one of ORACLE, SAP, SHAREPOINT,...",
            "example" : "EXAMPLESYSTEM"
          },
          "log_guid" : {
            "type" : "string",
            "description" : "globally unique identifier",
            "example" : "69043178"
          },
          "log_level" : {
            "type" : "string",
            "description" : "one of INFO, ERROR, FATAL_ERROR, DEBUG, WARNING",
            "example" : "ERROR"
          },
          "application_code" : {
            "type" : "string",
            "description" : "application code (LDS,MZE,LDSI,...)",
            "example" : "EXAMPLEAPP"
          },
          "application_context" : {
            "type" : "string",
            "description" : "log attachments, ...",
            "example" : "EXAMPLE APP CONTEXT"
          },
          "created_at" : {
            "type" : "string",
            "description" : "response format= \"yyyy-MM-dd'T'HH:mm:ss\" (example:2019-02-04T15:19:03) request body format= \"yyyy-MM-dd HH.mm.ss\" (example:2019-02-04 15:19:03)",
            "example" : "2019-02-04 15:19:03"
          },
          "log_message" : {
            "type" : "string",
            "description" : "log description"
          },
          "call_stack" : {
            "type" : "string",
            "description" : "the stack trace"
          },
          "created_by" : {
            "type" : "string",
            "example" : "OWNER"
          }
        }
      },
      "Node400Error" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/Node400Error_error"
          }
        }
      },
      "GraphQLData" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/GraphQLData_data"
          }
        }
      },
      "GraphQLErrors" : {
        "type" : "object",
        "properties" : {
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GraphQLErrors_errors"
            }
          },
          "data" : {
            "$ref" : "#/components/schemas/GraphQLErrors_data"
          }
        }
      },
      "body" : {
        "required" : [ "query" ],
        "type" : "object",
        "properties" : {
          "query" : {
            "type" : "string",
            "example" : "{logsSearch(searchInput: {application_code: \"LDS\", log_level: \"ERROR\", source_system: \"ORACLE\",  created_at_gte: \"2018-03-06\", created_at_lte: \"2019-03-08\", log_guid: \"69043178\", from: 400, size: 200}) { source_function,source_system,log_guid,log_level,application_code,application_context,created_at,log_message,call_stack,created_by }}"
          }
        }
      },
      "inline_response_200" : {
        "type" : "object",
        "properties" : {
          "result" : {
            "type" : "string",
            "example" : "ok"
          }
        }
      },
      "inline_response_500_error" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "type of error",
            "example" : "Error with the logstash endpoint"
          },
          "details" : {
            "type" : "string",
            "description" : "description of the error",
            "example" : "timeout of 5000ms exceeded"
          }
        }
      },
      "inline_response_500" : {
        "type" : "object",
        "properties" : {
          "error" : {
            "$ref" : "#/components/schemas/inline_response_500_error"
          }
        }
      },
      "inline_response_200_1" : {
        "type" : "object",
        "properties" : {
          "total hits" : {
            "type" : "integer",
            "example" : 1
          },
          "data" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Log"
            }
          }
        }
      },
      "Node400Error_error" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "type of error",
            "example" : "ValidationError"
          },
          "details" : {
            "type" : "string",
            "description" : "description of the error",
            "example" : "\"source_system\" with value \"ORA_CLE\" fails to match the required pattern: /^[a-zA-Z]*$/"
          }
        }
      },
      "GraphQLData_data" : {
        "type" : "object",
        "properties" : {
          "logsSearch" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Log"
            }
          }
        }
      },
      "GraphQLErrors_locations" : {
        "type" : "object",
        "properties" : {
          "line" : {
            "type" : "number",
            "example" : 1
          },
          "column" : {
            "type" : "number",
            "example" : 2
          }
        }
      },
      "GraphQLErrors_errors" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "example" : "Cannot query field \"logsSearcsh\" on type \"Query\". Did you mean \"logsSearch\"?"
          },
          "locations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/GraphQLErrors_locations"
            }
          },
          "path" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "example" : "logsSearch"
            }
          }
        }
      },
      "GraphQLErrors_data" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "$ref" : "#/components/schemas/GraphQLData_data"
          }
        }
      }
    }
  }
}